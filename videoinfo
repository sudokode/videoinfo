#!/bin/bash

# Copyright (c) 2015 sudokode <sudokode@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# videoinfo
# Usage: videoinfo (print normally)
#        videoinfo | sprunge (pastebin output; see function down there vv)
# Description: Print useful information about the system's video configuration. This script
#              can also paste files to http://sprunge.us and be used to provide useful
#              information to anyone helping you debug a video program.
# Homepage: https://github.com/sudokode/videoinfo

# Make this function into an alias to make it even more useful:
#   alias sprunge='curl -F '\''sprunge=<-'\'' http://sprunge.us'
#   Usage: <cmd> | sprunge
#          sprunge </path/to/file
#          cat -n /path/to/files/* | sprunge
set +e
sprunge() {
  curl -sF 'sprunge=<-' http://sprunge.us || return 1
}

printf "Report bad results: https://github.com/sudokode/videoinfo/issues\n\n"

{
printf "Arch: %s\n" "$(uname -m)"
printf "Kernel: %s\n" "$(uname -r)"

printf "Kernels installed: "
if hash expac &>/dev/null; then
  printf "\n"
  expac '%n %v' | awk '/^linux/ && !/headers|firmware/ {printf "\t[%s]\t%s\n", $2, $1}' | sort -r
elif hash pacman &>/dev/null; then
  printf "\n"
  pacman -Q | awk '/^linux/ && !/headers|firmware/ {printf "\t[%s]\t%s\n", $2, $1}' | sort -r
else
  printf "[expac/pacman not installed]\n"
fi

for id in $(lspci | awk '/VGA/ {print $1}'); do
  printf "\nVideo Card: %s\n" "$(lspci | awk 'BEGIN {FS=": "} /'$id'/{print $2}')"
  driver=$(lspci -vmm -s $id -k | awk '/Driver/ {print $2}')
  printf "\tKernel Driver: %s\n" $driver
  printf "\tKMS: "
  if [[ -e /sys/module/$driver/parameters/modeset ]]; then
    if [[ "$(</sys/module/$driver/parameters/modeset)" == 1 ]]; then
      printf "Enabled\n"
    else
      printf "Disabled\n"
    fi
  else
      printf "Unsupported\n"
  fi
done

printf "\nnomodeset: "
if grep -qs nomodeset /proc/cmdline; then
  printf "True\n"
else
  printf "False\n"
fi

if hash glxinfo &>/dev/null; then
  printf "Direct Rendering: %s\n" "$(glxinfo | awk 'BEGIN {FS=": "} /direct rendering/ {print $2}')"

  printf "Direct Renderer: %s\n" "$(glxinfo | awk 'BEGIN {FS=": "} /renderer/ {print $2}')"
else
  printf "[glxinfo not installed]\n"
fi

printf "Xorg Drivers: "
d=${DISPLAY:1}
modules=$(awk '/LoadModule/ {print $5}' /var/log/Xorg.${d}.log | sed 's/"//g')
gfx=('nvidia' 'nv' 'nouveau' 'fglrx' 'radeon' 'intel' 'vesa')
vmods=()

for m in $modules; do
  for g in $gfx; do
    if [[ $m == $g ]]; then
      rx="Loading.*${m}.*.so"
      if grep -qsE $rx /var/log/Xorg.${d}.log; then
        vmods+=($m)
      fi
    fi
  done
done

if [[ "$vmods" ]]; then
  vmods=($(printf "%s\n" "${vmods[@]}" | sort))
  printf "%s " "${vmods[@]}"

  printf "\nXorg Graphics: "
  optimus_open1=('intel' 'nv')
  optimus_open1=('intel' 'nouveau')
  optimus_prop=('intel' 'nvidia')
  atidsg_open=('intel' 'radeon')
  atidsg_prop=('fglrx' 'intel')
  if [[ $vmods == $optimus_open1 ]] || [[ $vmods == $optimus_open2 ]]; then
    printf "Optimus (Intel & Nvidia) [OPEN SOURCE]\n"
  elif [[ $vmods == $optimus_prop ]]; then
    printf "Optimus (Intel & Nvidia) [PROPRIETARY]\n"
  elif [[ $vmods == $atidsg_open ]]; then
    printf "ATI Dynamic Switchable Graphics (Intel & AMD) [OPEN SOURCE]\n"
  elif [[ $vmods == $atidsg_prop ]]; then
    printf "ATI Dynamic Switchable Graphics (Intel & AMD) [PROPRIETARY]\n"
  elif [[ $vmods == "intel" ]]; then
    printf "Intel [OPEN]\n"
  elif [[ $vmods == "nv" ]] || [[ $vmods == "nouveau" ]]; then
    printf "Nvidia [OPEN]\n"
  elif [[ $vmods == "radeon" ]]; then
    printf "AMD [OPEN]\n"
  elif [[ $vmods == "nvidia" ]]; then
    printf "Nvidia [PROPRIETARY]\n"
  elif [[ $vmods == "fglrx" ]]; then
    printf "AMD [PROPRIETARY]\n"
  elif [[ $vmods == "vesa" ]]; then
    printf "VESA [OPEN]\n"
  else
    printf "Other\n"
  fi
else
  printf "Unknown\n"
fi

printf "\nPress Enter to pastebin relevant stuff...\n"
read

printf "lspci: %s\n" "$(lspci -k | sprunge)"
printf "dmesg: %s\n" "$(dmesg | sprunge)"
printf "lsmod: %s\n" "$(lsmod | sprunge)"

printf "\n"

printf "Xorg log: "
d=${DISPLAY:1}
data="${XDG_DATA_HOME:-$HOME/.local/share}"
if [[ -e "$data/xorg/Xorg.${d}.log" ]]; then
  xlog="$data/xorg/Xorg.${d}.log"
elif [ -e /var/log/Xorg.${d}.log ]; then
  xlog="/var/log/Xorg.${d}.log"
fi
if [[ "$xlog" ]]; then
  printf "%s (%s)\n" "$(sprunge <"$xlog")" "$xlog"
else
  printf "Not Found\n"
fi

if [[ "$XINITRC" ]]; then
  if [[ -e "$XINITRC" ]]; then
    xinitrc="$XINITRC"
  else
    printf "[Warning: XINITRC set but does not exist!]\n"
  fi
elif [ -e "$HOME"/.xinitrc ]; then
  xinitrc="$HOME"/.xinitrc
fi
if [[ "$xinitrc" ]]; then
  printf "xinitrc: %s (%s)\n" "$(sprunge <"$xinitrc")" "$xinitrc"
else
  printf "xinitrc: Not Found\n"
fi

printf "xorg.conf: "
xconf="/etc/X11/xorg.conf"
if [ -e $xconf ]; then
  printf "$xconf (%s)\n" "$(sprunge <$xconf)" $xconf
else
  printf "Not Found\n"
fi

printf "xorg.conf.d files: "
xconfd="/etc/X11/xorg.conf.d/"
if [ -e $xconfd/* ]; then
  printf "%s (%s)\n" "$(cat -n $xconfd/* | sprunge)" $xconfd
else
  printf "None Found\n\n"
fi

} | tee /dev/stderr | sprunge
