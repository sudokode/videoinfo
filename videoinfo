#!/bin/bash

# Copyright (c) 2015 sudokode <sudokode@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# videoinfo
# Usage: ./videoinfo
# Description: Print useful information about the system's video configuration. This script
#              can also paste files to http://sprunge.us or http://ix.ioand be used to provide
#              useful information to anyone helping to debug a video problem.
# Homepage: https://github.com/sudokode/videoinfo

set +e

sprunge() {
  curl -sF "sprunge=<-" sprunge.us
}

ix() {
  curl -sF "f:1=<-" ix.io
}

paste() {
  lang=$1

  url=$(sprunge "$@")
  if [[ "$url" ]]; then
    sed 's/$/?'$lang'/' <<< $url
  else
    url=$(ix "$@")
    if [[ "$url" ]]; then
      sed 's:$:/'$lang':' <<< $url
    fi
  fi
}

printf "Report bad results: https://github.com/sudokode/videoinfo/issues\n\n"

{
printf "Arch: %s\n" "$(uname -m)"
kernel=$(uname -r)
printf "Kernel: %s\n" $kernel

printf "Kernels installed: "
kernels=$(file /boot/vmlinuz-linux* | awk '/Linux kernel/ {printf "\t%s\n", $9}' | sort -r)
if [[ "$kernels" ]]; then
  kernels=$(sed 's/\('$kernel'\)/[\1]/' <<< "$kernels")
  printf "\n%s\n" "$kernels"
else
  printf "Unknown\n"
fi

for id in $(lspci | awk '/VGA/ {print $1}'); do
  printf "\nVideo Card: %s\n" "$(lspci | awk 'BEGIN {FS=": "} /'$id'/{print $2}')"
  driver=$(lspci -vmm -s $id -k | awk '/Driver/ {print $2}')
  printf "\tKernel Driver: %s\n" $driver
  if [[ -e /sys/module/$driver/parameters/modeset ]]; then
    printf "Warning: Determining if KMS is enabled requires root access\n" >&2
    ms=$(sudo cat /sys/module/$driver/parameters/modeset) 
    if [[ -z $ms ]]; then
      printf "\tKMS: Unknown"
    else
      sudo -k
      if [[ $ms == @(1|-1) ]]; then
        printf "\tKMS: Enabled\n"
      else
        printf "\tKMS: Disabled\n"
      fi
    fi
  else
    printf "\tKMS: Unsupported\n"
  fi
done

printf "\nnomodeset: "
if grep -qs nomodeset /proc/cmdline; then
  printf "True\n"
else
  printf "False\n"
fi

if hash glxinfo &>/dev/null; then
  dr="$(glxinfo | awk 'BEGIN {FS=": "} /direct rendering/ {print $2}')"
  printf "Direct Rendering: "
  if [[ $dr == "Yes" ]] || [[ $dr == "No" ]]; then
    printf "%s\n" $dr
    printf "Direct Renderer: %s\n" "$(glxinfo | awk 'BEGIN {FS=": "} /OpenGL renderer/ {print $2}')"
  else
    printf "Unavailable\n"
  fi
else
  printf "[glxinfo not installed]\n"
fi

printf "Xorg Drivers: "
d=${DISPLAY:1}
data="${XDG_DATA_HOME:-$HOME/.local/share}"
gdm=false
if systemctl is-active gdm-x-session &>/dev/null; then
  gdm=true
  xlog="$(journalctl -b -u gdm-x-session)"
elif [[ -e "$data/xorg/Xorg.${d}.log" ]]; then
  xlog="$data/xorg/Xorg.${d}.log"
elif [[ -e /var/log/Xorg.${d}.log ]]; then
  xlog="/var/log/Xorg.${d}.log"
fi
if [[ $gdm == true ]]; then
  modules=$(awk '/LoadModule/ {print $5}' <<< "$xlog" | sed 's/"//g')
else
  modules=$(awk '/LoadModule/ {print $5}' "$xlog" | sed 's/"//g')
fi
gfx=('nvidia' 'nv' 'nouveau' 'fglrx' 'radeon' 'intel' 'vesa')
vmods=()

for m in $modules; do
  for g in $gfx; do
    if [[ $m == $g ]]; then
      rx="Loading.*${m}.*.so"
      if grep -qsE $rx "$xlog"; then
        vmods+=($m)
      fi
    fi
  done
done

if [[ "$vmods" ]]; then
  vmods=($(printf "%s\n" "${vmods[@]}" | sort))
  printf "%s " "${vmods[@]}"

  printf "\nXorg Graphics: "
  optimus_open1=('intel' 'nv')
  optimus_open1=('intel' 'nouveau')
  optimus_prop=('intel' 'nvidia')
  atidsg_open=('intel' 'radeon')
  atidsg_prop=('fglrx' 'intel')
  if [[ $vmods == $optimus_open1 ]] || [[ $vmods == $optimus_open2 ]]; then
    printf "Optimus (Intel & Nvidia) [OPEN]\n"
  elif [[ $vmods == $optimus_prop ]]; then
    printf "Optimus (Intel & Nvidia) [PROPRIETARY]\n"
  elif [[ $vmods == $atidsg_open ]]; then
    printf "ATI Dynamic Switchable Graphics (Intel & AMD) [OPEN]\n"
  elif [[ $vmods == $atidsg_prop ]]; then
    printf "ATI Dynamic Switchable Graphics (Intel & AMD) [PROPRIETARY]\n"
  elif [[ $vmods == "intel" ]]; then
    printf "Intel [OPEN]\n"
  elif [[ $vmods == "nv" ]] || [[ $vmods == "nouveau" ]]; then
    printf "Nvidia [OPEN]\n"
  elif [[ $vmods == "radeon" ]]; then
    printf "AMD [OPEN]\n"
  elif [[ $vmods == "nvidia" ]]; then
    printf "Nvidia [PROPRIETARY]\n"
  elif [[ $vmods == "fglrx" ]]; then
    printf "AMD [PROPRIETARY]\n"
  elif [[ $vmods == "vesa" ]]; then
    printf "VESA [OPEN]\n"
  else
    printf "Other\n"
  fi
else
  printf "Unknown\n"
fi

printf "\nPress Enter to pastebin relevant stuff...\n"
read

printf "lspci: %s\n" "$(lspci -k | paste 'text')"
printf "dmesg: %s\n" "$(dmesg | paste 'text')"
printf "lsmod: %s\n" "$(lsmod | paste 'text')"

printf "\n"

printf "Xorg log: "
# The Xorg log is found when the modules are processed ^^
if [[ "$xlog" ]]; then
  if $gdm; then
    printf "%s (%s)\n" "$(paste 'text' <<< "$xlog")" "gdm-x-session"
  else
    printf "%s (%s)\n" "$(paste 'text' <"$xlog")" "$xlog"
  fi
else
  printf "Not Found\n"
fi

if [[ "$XINITRC" ]]; then
  if [[ -e "$XINITRC" ]]; then
    xinitrc="$XINITRC"
  else
    printf "[Warning: XINITRC set but does not exist!]\n"
  fi
elif [[ -e "$HOME"/.xinitrc ]]; then
  xinitrc="$HOME/.xinitrc"
elif [[ -e "$HOME"/.config/X11/xinitrc ]]; then
  xinitrc="$HOME/.config/X11/xinitrc"
fi
if [[ "$xinitrc" ]]; then
  printf "xinitrc: %s (%s)\n" "$(paste 'sh' <"$xinitrc")" "$xinitrc"
else
  printf "xinitrc: Not Found\n"
fi

printf "xorg.conf: "
xconf="/etc/X11/xorg.conf"
if [[ -e "$xconf" ]]; then
  printf "%s (%s)\n" "$(paste 'text' <"$xconf")" "$xconf"
else
  printf "Not Found\n"
fi

printf "xorg.conf.d files: "
xconfd="/usr/share/X11/xorg.conf.d"
files=($xconfd)
if [[ ${#files[@]} == 0 ]]; then
  xconfd="/etc/X11/xorg.conf.d"
  files=($xconfd)
fi
if [[ ${#files[@]} > 0 ]]; then
  printf "%s (%s)\n\n" "$(cat "$xconfd"/* | paste 'text')" "$xconfd"
else
  printf "None Found\n\n"
fi

} | tee /dev/stderr | paste 'text'
